# -*- coding: utf-8 -*-
"""HateXplain Dataset Conversion from Json to CSV(Ensemble Model).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X85AMTZZB2XUci1f1emldjnGFCMNvjoT
"""

import pandas as pd
from google.colab import drive

drive.mount('/content/gdrive')

dataJson = pd.read_json('gdrive/MyDrive/dataset(HateXplain).json')

dataCsv = pd.read_csv('gdrive/MyDrive/HateXplain.csv')

dataXcel = pd.read_excel('gdrive/MyDrive/HateXplain.xlsx')

# dataJson.to_csv("hateXplainCsv.csv",index=False)

# dataCsv = pd.read_csv('hateXplainCsv.csv')

dataXcel.head()

dataJson['1179055004553900032_twitter'][1]

dataJson['1179055004553900032_twitter'][1][0]

dataJson['1179055004553900032_twitter'][3]

# dictList = []
idList = []
tokenList = []
labelList = []
targetList = []
for key1 in dataJson:
  tokenList.append(dataJson[key1][3])

# cnt = 0
for key1 in dataJson:
  # if cnt == 1000:
  #   break
  dictTemp = {'normal': 0, 'hatespeech': 0, 'offensive': 0}
  dictTemp[dataJson[key1][1][0]['label']] += 1
  dictTemp[dataJson[key1][1][1]['label']] += 1
  dictTemp[dataJson[key1][1][2]['label']] += 1
  max_label = max(dictTemp, key=dictTemp.get)
  if dictTemp[max_label] == 1:
    max_label = "normal"
    # These are the ambigious labels, so they will be labeled as normal
    # print(dataJson[key1][0]) 
  labelList.append(max_label)


cnt = 0
for key1 in dataJson:

  # if cnt == 5:
  #   break
  tempTargetDict = {}
  for i in range(3):
    tempTargetList = dataJson[key1][1][i]['target']
    # print(tempTargetList)
    for target in tempTargetList:
      if target in tempTargetDict:
        tempTargetDict[target] += 1
      else:
        tempTargetDict[target] = 1

  tempValidTargetList = []
  # print(tempTargetDict)
  for key in tempTargetDict:
    if tempTargetDict[key] >= 1:
      # print(key)
      tempValidTargetList.append(key)

  # print(tempValidTargetList)
  targetList.append(tempValidTargetList)
  # print()
  # cnt += 1

for key1 in dataJson:
  id = dataJson[key1][0]
  idList.append(id)

# dictList = []
idList = []
tokenList = []
labelList = []
targetList = []
for key1 in dataJson:
  tokenList.append(dataJson[key1][3])

# cnt = 0
for key1 in dataJson:
  # if cnt == 1000:
  #   break
  dictTemp = {'normal': 0, 'hatespeech': 0, 'offensive': 0}
  dictTemp[dataJson[key1][1][0]['label']] += 1
  dictTemp[dataJson[key1][1][1]['label']] += 1
  dictTemp[dataJson[key1][1][2]['label']] += 1
  max_label = max(dictTemp, key=dictTemp.get)
  if dictTemp[max_label] == 1:
    max_label = "normal"
    # These are the ambigious labels, so they will be labeled as normal
    # print(dataJson[key1][0]) 
  labelList.append(max_label)


cntmax = 0
for key1 in dataJson:

  # if cnt == 5:
  #   break
  tempTargetDict = {}
  for i in range(3):
    tempTargetList = dataJson[key1][1][i]['target']
    # print(tempTargetList)
    for target in tempTargetList:
      if target in tempTargetDict:
        tempTargetDict[target] += 1
      else:
        tempTargetDict[target] = 1

  tempValidTargetList = []
  cnt = 0
  # print(tempTargetDict)
  for key in tempTargetDict:
    if tempTargetDict[key] >= 2:
      cnt = 1
      # print(key)
      tempValidTargetList.append(key)

  # print(tempValidTargetList)
  targetList.append(tempValidTargetList)
  # print()
  # cnt += 1
  cntmax += cnt

for key1 in dataJson:
  id = dataJson[key1][0]
  idList.append(id)

print(20148 - cntmax)

targetNames = ['African',	'Arab',	'Asian',	'Caucasian',	'Hispanic',	'Buddhism',	'Christian',	'Hindu',	'Islam',	'Jewish',	'Men', 'Women',	'Heterosexual',	'Indigenous',	'Refugee',	'None',	'Other', 'Homosexual']

# megaList[listAfrican = [],
# listArabs = [],
# listAsians = [],
# listCaucasian = [],
# listHispanic = [],
# listBuddhism = [],
# listChristian = [],
# listHindu = [],
# listIslam = [],
# listJewish = [],
# listMen = [],
# listWomen = [],
# listHeterosexual = [],
# listIndigenous = [],
# listRefugeeImmigrant = [],
# listNone = [],
# listOthers = []],

megaList = [[] for i in range(18)]

for key1 in dataJson:

  # if cnt == 5:
  #   break
  tempTargetDict = {'African': 0,	'Arab': 0,	'Asian': 0,	'Caucasian': 0,	'Hispanic': 0,	'Buddhism': 0,	'Christian': 0,	'Hindu': 0,	'Islam': 0,	'Jewish': 0,	'Men': 0, 'Women': 0,	'Heterosexual': 0, 'Indigenous': 0,	'Refugee': 0,	'None': 0,	'Other': 0, 'Homosexual': 0}
  for i in range(3):
    tempTargetList = dataJson[key1][1][i]['target']
    # print(tempTargetList)
    for target in tempTargetList:
      if target in tempTargetDict:
        tempTargetDict[target] += 1
      # else:
      #   tempTargetDict[target] = 1

  tempValidTargetList = []
  # print(tempTargetDict)
  for i in range(len(megaList)):
    name = targetNames[i]
    val = tempTargetDict[name]
    if val > 0:
      megaList[i].append(1)
    else:
      megaList[i].append(0)

print(len(megaList))

for i in range(len(megaList)):
  print(i, " --> ", targetNames[i], " ---> ", megaList[i])

cnt = 0
for x in megaList[7]:
  if x == 1:
    cnt += 1
print(cnt)

data = {'id': idList, 'tokens': tokenList, 'label': labelList, 'targetList': targetList}
tokenDf = pd.DataFrame(data = data)
tokenDf

data2 = {'id': idList, 'tokens': tokenList, 'label': labelList, 'African': megaList[0], 'Arab': megaList[1], 'Asian': megaList[2],
         'Caucasian': megaList[3], 'Hispanic': megaList[4], 'Buddhism': megaList[5], 'Christian': megaList[6], 'Hindu': megaList[7],
         'Islam': megaList[8], 'Jewish': megaList[9], 'Men': megaList[10], 'Women': megaList[11], 'Heterosexual': megaList[12],
         'Indigenous': megaList[13], 'Refugee': megaList[14], 'None': megaList[15], 'Other': megaList[16], 'Homosexual': megaList[17]}

finalDataFrame = pd.DataFrame(data = data2)
finalDataFrame



tokenDf.to_csv('dataset.csv')
finalDataFrame.to_csv('finalizedDataset.csv')

len(idList)

"""
#**Creating Graphs**"""

import matplotlib.pyplot as plt

dataset = finalDataFrame
normal = 0
offensive = 0
hatespeech = 0
for i in range(len(dataset)):
  if dataset['label'][i] == "normal":
    normal += 1
  elif dataset['label'][i] == "hatespeech":
    hatespeech += 1
  else:
    offensive += 1



# Comment labels plotted against number of comments.

labels = ["Normal", "Offensive", "Hatespeech"]
values = [normal, offensive, hatespeech]

fig = plt.figure(figsize = (10, 5))

plt.bar(labels, values, color = ["green", "blue", "red"], width = 0.4)
plt.xlabel("Comment Type")
plt.ylabel("Number of Comments")


plt.show()

targetFrequency = [0] * 18


for i in range(len(targetNames)):
  for j in range(len(dataset)):
    if dataset[targetNames[i]][j] == 1:
      targetFrequency[i] += 1


print(targetFrequency)

# Targeted communities plotted against the number of comments which target them.


labels = targetNames
values = targetFrequency

fig = plt.figure(figsize = (20, 10))

plt.bar(labels, values, color = ['gray', 'red', 'green', 'blue', 'cyan', 'darkorange', 'purple', 'lightpink', 'saddlebrown'], width = 0.4)
plt.xlabel("Targeted Communities")
plt.ylabel("Number of Comments")
plt.show()

# Number of Targetted communities plotted against number of comments. Will tell us
# the number of targeted communities for each comment.

countTarget = [0] * 19

for i in range(len(dataset)):
  count = 0
  for target in targetNames:
    if dataset[target][i] == 1:
      count += 1
  countTarget[count] += 1
  # if count == 0:
  #   print(dataset['id'][i])



# print(sum)

values = []
for i in range(1, 14):
  values.append(countTarget[i])

print(values)

import numpy as np
labels = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13"]
# print(labels)

fig = plt.figure(figsize = (20, 8))

plt.bar(labels, values, color = ['gray', 'red', 'green', 'blue', 'cyan', 'darkorange', 'purple', 'lightpink', 'saddlebrown'], width = 0.4)
plt.xlabel("Number of Targeted Communities")
plt.ylabel("Number of Comments")
plt.show()

